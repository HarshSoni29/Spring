Some Of The Design Patterns : --- 

There was the some of the famous design pattern categorized into Creational, Structural and Behavioral --

Creational Design Patterns :
These deal with object creation mechanisms, aiming to create objects in a manner suitable for the situation.

Singleton : 

Ensures a class has only one instance and provides a global point of access to it.
Example: Runtime class in Java.

Factory Method :

Defines an interface for creating an object but lets subclasses decide which class to instantiate.
Example: java.util.Calendar's getInstance().

Abstract Factory :

Provides an interface for creating families of related or dependent objects without specifying their concrete classes.
Example: javax.xml.parsers.DocumentBuilderFactory.

Builder :

Separates the construction of a complex object from its representation, allowing different representations to be built step by step.
Example: StringBuilder or StringBuffer.

Prototype :

Creates new objects by copying an existing object (cloning).
Example: Object.clone() method.

--------------------------------------------------------------------------------------------------------------

Structural Design Patterns
These focus on object composition and typically identify simple ways to realize relationships between different objects.

Adapter :

Allows incompatible interfaces to work together.
Example: java.io.InputStreamReader (converts InputStream to Reader).

Bridge :

Separates an abstraction from its implementation, allowing both to vary independently.
Example: JDBC drivers.

Composite :

Composes objects into tree-like structures to represent part-whole hierarchies.
Example: java.awt.Container and its components.

Decorator :

Dynamically adds responsibilities to an object without modifying its structure.
Example: java.io.BufferedReader wrapping Reader.

Facade :

Provides a unified interface to a set of interfaces in a subsystem.
Example: javax.faces.context.FacesContext.

Flyweight :

Reduces the cost of creating and managing a large number of similar objects by sharing them.
Example: java.lang.Integer.valueOf() (for caching integers).

Proxy :

Provides a surrogate or placeholder for another object to control access to it.
Example: java.lang.reflect.Proxy.

-----------------------------------------------------------------------------------------------------------

Behavioral Design Patterns
These deal with algorithms and the assignment of responsibilities between objects.

Chain of Responsibility

Passes requests along a chain of handlers where each handler decides to process it or pass it on.
Example: javax.servlet.Filter.

Command :

Encapsulates a request as an object, allowing you to parameterize clients with different requests.
Example: java.lang.Runnable.

Interpreter :

Defines a grammatical representation for a language and an interpreter to deal with the grammar.
Example: Regular expressions (java.util.regex package).

Iterator :

Provides a way to access elements of a collection sequentially without exposing its internal structure.
Example: java.util.Iterator.

Mediator :

Reduces the communication complexity between objects by introducing a mediator object.
Example: java.util.Timer.

Memento :

Captures and restores an object's internal state without violating encapsulation.
Example: java.util.Date (mutable state).

Observer :

Defines a one-to-many dependency so that when one object changes state, all its dependents are notified.
Example: java.util.Observer and java.util.Observable (deprecated, but still demonstrates the concept).

State :

Allows an object to alter its behavior when its internal state changes.
Example: javax.faces.lifecycle.Lifecycle methods.

Strategy :

Defines a family of algorithms, encapsulates each one, and makes them interchangeable.
Example: java.util.Comparator.

Template Method :

Defines the skeleton of an algorithm in a method, deferring some steps to subclasses.
Example: java.util.AbstractList.

Visitor :

Allows adding new operations to objects without changing their structure.
Example: javax.lang.model.element.ElementVisitor.


----------------------------------------------------------------------------------------------------------

** Mainly Defination ** 

1) Creational Design Patterns [how object are created]: Mainly focus on the best way to create objects, ensuring flexibility and reuse.

2) Behavioral Design Patterns [how object communicate and collaborate]: Mainly focus on the interaction and communication between objects.

3) Structural Design Patterns [how objects and classes are composed]: focus on the organizing classes and objects to form larger structures while ensuring flexibility and efficiency.

---------------------------------------------------------------------------------------------------------------

** Mostly Used pattern **


1) Singleton Pattern (Creational) : [Ensures only one instance of a class exists]
2) Factory Method Pattern (Creational) : [Creates objects without specifying their exact class]
3) Builder Pattern (Creational) : [Constructs complex objects step-by-step]
4) Observer Pattern (Behavioral) : [Notifies dependent objects of changes in state]
5) Decorator Pattern (Structural) : [Dynamically adds or alters functionality of an object]